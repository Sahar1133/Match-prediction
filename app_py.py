# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GD1bF0lTePChtOzMXLF4HjNCvhWxa6Fp
"""

# KNN Model (with Dataset)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import streamlit as st

# Create a sample cricket match dataset
data = {
    'runs_scored': [250, 320, 180, 300, 250, 230, 350, 200, 275, 180],
    'wickets_taken': [5, 8, 7, 9, 6, 8, 7, 6, 8, 7],
    'opponent_runs': [220, 280, 200, 270, 230, 210, 340, 190, 260, 200],
    'opponent_wickets': [6, 9, 8, 8, 7, 7, 6, 5, 8, 9],
    'match_won': [1, 1, 0, 1, 1, 0, 1, 0, 1, 0]  # 1 = Win, 0 = Loss
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Features and labels
X = df[['runs_scored', 'wickets_taken', 'opponent_runs', 'opponent_wickets']]
y = df['match_won']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the KNN model
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Make predictions and evaluate the model
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the KNN model: {accuracy * 100:.2f}%")

# Streamlit UI for KNN Cricket Match Prediction

import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier

# Sample dataset as shown earlier
data = {
    'runs_scored': [250, 320, 180, 300, 250, 230, 350, 200, 275, 180],
    'wickets_taken': [5, 8, 7, 9, 6, 8, 7, 6, 8, 7],
    'opponent_runs': [220, 280, 200, 270, 230, 210, 340, 190, 260, 200],
    'opponent_wickets': [6, 9, 8, 8, 7, 7, 6, 5, 8, 9],
    'match_won': [1, 1, 0, 1, 1, 0, 1, 0, 1, 0]  # 1 = Win, 0 = Loss
}

df = pd.DataFrame(data)

# Features and labels
X = df[['runs_scored', 'wickets_taken', 'opponent_runs', 'opponent_wickets']]
y = df['match_won']

# Standardize the features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Train the KNN model
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X, y)

# Streamlit UI
st.title("Cricket Match Win Prediction using K-Nearest Neighbors")

# User Inputs
runs_scored = st.number_input("Enter Runs Scored", min_value=0, value=250)
wickets_taken = st.number_input("Enter Wickets Taken", min_value=0, value=5)
opponent_runs = st.number_input("Enter Opponent's Runs", min_value=0, value=220)
opponent_wickets = st.number_input("Enter Opponent's Wickets", min_value=0, value=6)

# Prepare input for prediction
input_data = pd.DataFrame([[runs_scored, wickets_taken, opponent_runs, opponent_wickets]],
                          columns=['runs_scored', 'wickets_taken', 'opponent_runs', 'opponent_wickets'])

# Standardize the input data
input_data = scaler.transform(input_data)

# Prediction
if st.button("Predict Match Outcome"):
    prediction = knn.predict(input_data)
    if prediction == 1:
        st.write("The team is likely to win the match!")
    else:
        st.write("The team is likely to lose the match.")

# Run the app with: `streamlit run <filename>.py`