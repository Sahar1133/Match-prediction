# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ON7hW6bya6mSr2ZLQn6t7MYdIlJSw2pC
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.neighbors import KNeighborsClassifier

# Function to load dataset
@st.cache_data
def load_data():
    file_path = "car_evaluation.csv"  # Ensure this file is in your GitHub repo
    df = pd.read_csv(file_path)
    return df

# Load dataset
df = load_data()

# Encode categorical features to numerical values
encoder = LabelEncoder()
for col in df.columns:
    df[col] = encoder.fit_transform(df[col])

# Splitting dataset
X = df.drop(columns=["class"])
y = df["class"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train KNN model
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Streamlit UI
st.title("ðŸš— Car Quality Prediction using KNN")

st.sidebar.header("Input Car Features")

# Dropdown options based on dataset values
buying_options = ["vhigh", "high", "med", "low"]
maint_options = ["vhigh", "high", "med", "low"]
doors_options = ["2", "3", "4", "5more"]
persons_options = ["2", "4", "more"]
lug_boot_options = ["small", "med", "big"]
safety_options = ["low", "med", "high"]

# User Inputs
buying = st.sidebar.selectbox("Buying Price", buying_options)
maint = st.sidebar.selectbox("Maintenance Cost", maint_options)
doors = st.sidebar.selectbox("Number of Doors", doors_options)
persons = st.sidebar.selectbox("Number of Persons", persons_options)
lug_boot = st.sidebar.selectbox("Luggage Boot Size", lug_boot_options)
safety = st.sidebar.selectbox("Safety", safety_options)

# Convert inputs to numerical values
user_input = pd.DataFrame({
    "buying": [buying_options.index(buying)],
    "maint": [maint_options.index(maint)],
    "doors": [doors_options.index(doors)],
    "persons": [persons_options.index(persons)],
    "lug_boot": [lug_boot_options.index(lug_boot)],
    "safety": [safety_options.index(safety)],
})

# Predict
prediction = knn.predict(user_input)
predicted_class = encoder.inverse_transform(prediction)[0]

# Display Result
st.success(f"### ðŸš˜ Predicted Car Quality: *{predicted_class}*")