# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fx3wGafDNSVXDHuejyCAxTmQMFsbLq6W
"""

!pip install streamlit

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import streamlit as st

# Create a sample dataset for match prediction
data = {
    'team_strength': np.random.randint(50, 100, 100),  # Random team strength values between 50 and 100
    'player_performance': np.random.randint(1, 10, 100),  # Random player performance between 1 and 10
    'home_advantage': np.random.randint(0, 2, 100),  # Home advantage (0 = No, 1 = Yes)
    'weather_condition': np.random.choice(['Good', 'Bad'], 100),  # Weather conditions (Good or Bad)
    'Outcome': np.random.choice(['Win', 'Lose'], 100)  # Random match outcome (Win or Lose)
}

# Convert dictionary to DataFrame
df = pd.DataFrame(data)

# Display the first few rows of the dataset
df.head()

# Encode categorical columns
label_encoder = LabelEncoder()
df['weather_condition'] = label_encoder.fit_transform(df['weather_condition'])  # Convert weather_condition to numerical values
df['Outcome'] = label_encoder.fit_transform(df['Outcome'])  # Convert Outcome (Win/Lose) to numerical

# Features and target
X = df.drop('Outcome', axis=1)  # Features
y = df['Outcome']  # Target (labels)

# Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features using StandardScaler (KNN works better with scaled data)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize KNN classifier with 5 neighbors
knn = KNeighborsClassifier(n_neighbors=5)

# Train the KNN model
knn.fit(X_train, y_train)

# Make predictions on the test set
y_pred = knn.predict(X_test)

# Evaluate the model's accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Function to make predictions based on user input
def predict_match(input_data):
    # Preprocess the user input data and scale it
    # Create a list of unique weather conditions from the original DataFrame
    weather_conditions = ['Good', 'Bad']
    # Fit the LabelEncoder to these unique values to ensure all possible values are handled
    label_encoder.fit(weather_conditions)
    input_data[3] = label_encoder.transform([input_data[3]])[0] # Transform weather condition using the fitted encoder
    input_data_scaled = scaler.transform([input_data])  # Scale the input data
    prediction = knn.predict(input_data_scaled)  # Predict the outcome
    return 'Win' if prediction[0] == 1 else 'Lose'

# Streamlit app UI
st.title("Match Outcome Prediction")

# Create input fields for the user to enter data
team_strength = st.number_input("Team Strength", min_value=50, max_value=100, value=70)
player_performance = st.number_input("Player Performance", min_value=1, max_value=10, value=5)
home_advantage = st.selectbox("Home Advantage", options=[0, 1], index=0)  # 0 = No, 1 = Yes
weather_condition = st.selectbox("Weather Condition", options=["Good", "Bad"], index=0)

# Collect user input
input_data = [
    team_strength,
    player_performance,
    home_advantage,
    weather_condition  # Keep weather condition as string initially
]

# Display the prediction when the user clicks the button
if st.button('Predict'):
    result = predict_match(input_data)
    st.write(f"Predicted Outcome: {result}")

# Create app.py file in Colab with the Streamlit code

code = '''
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import streamlit as st

# Create a sample dataset for match prediction
data = {
    'team_strength': np.random.randint(50, 100, 100),
    'player_performance': np.random.randint(1, 10, 100),
    'home_advantage': np.random.randint(0, 2, 100),
    'weather_condition': np.random.choice(['Good', 'Bad'], 100),
    'Outcome': np.random.choice(['Win', 'Lose'], 100)
}
df = pd.DataFrame(data)

# Encode categorical columns
label_encoder = LabelEncoder()
df['weather_condition'] = label_encoder.fit_transform(df['weather_condition'])  # Transform weather_condition into numeric
df['Outcome'] = label_encoder.fit_transform(df['Outcome'])  # Encode Outcome (Win/Lose)

# Features and target
X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize KNN classifier with 5 neighbors
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Evaluate the model
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Streamlit app
def predict_match(input_data):
    input_data_scaled = scaler.transform([input_data])  # Scale the input data
    prediction = knn.predict(input_data_scaled)
    return 'Win' if prediction[0] == 1 else 'Lose'

st.title("Match Outcome Prediction")

# Input fields for the user
team_strength = st.number_input("Team Strength", min_value=50, max_value=100, value=70)
player_performance = st.number_input("Player Performance", min_value=1, max_value=10, value=5)
home_advantage = st.selectbox("Home Advantage", options=[0, 1], index=0)  # 0 = No, 1 = Yes
weather_condition = st.selectbox("Weather Condition", options=["Good", "Bad"], index=0)

# Convert weather_condition to a numerical value using the label encoder
encoded_weather_condition = label_encoder.transform([weather_condition])[0]  # Transform to numeric value

# Collect user input
input_data = [
    team_strength,
    player_performance,
    home_advantage,
    encoded_weather_condition  # Use the transformed weather_condition here
]

if st.button('Predict'):
    result = predict_match(input_data)
    st.write(f"Predicted Outcome: {result}")
'''

# Write the above code into a file named 'app.py'
with open('app.py', 'w') as f:
    f.write(code)

print("app.py has been created.")